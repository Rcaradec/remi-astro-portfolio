---
interface Props {
  title: string;
}

const { title } = Astro.props;
import { ViewTransitions } from "astro:transitions";
---

<!doctype html>
<html lang="fr">
  <head>
    <meta charset="UTF-8" />
    <meta
      name="description"
      content="Ce portfolio est l'occasion pour moi de vous présenter mes compétences en développement web. Je suis passionné par la création de sites web et d'applications web. J'aime travailler sur des projets innovants et collaborer avec des équipes talentueuses."
    />
    <meta name="viewport" content="width=device-width" />
    <link rel="icon" type="image/svg+xml" href="/dev.svg" />
    <meta name="generator" content={Astro.generator} />
    <ViewTransitions />
    <title>{title}</title>
  </head>
  <body
    class="relative flex flex-col w-full min-h-dvh justify-center items-center bg-background"
  >
    <img
      src="/assets/background.svg"
      class="absolute
      inset-0
      w-full
      h-full
      object-cover"
      alt="Animated background"
    />
    <slot />
  </body>
</html>

<style is:global>
  @tailwind base;
  @tailwind components;
  @tailwind utilities;

  @layer base {
    :root {
      --background: 0, 0%, 98%;
      --foreground: 0, 0%, 9%;
      --card: 0, 0%, 100%;
      --muted: 0, 0%, 92%;
      --muted-foreground: #f2f2f2;
      --accent: 0, 0%, 92%;
      --border: 220 13% 91%;
    }

    .dark {
      --background: 0, 0%, 10%;
      --foreground: 0, 0%, 90%;
      --card: 0, 0%, 15%;
      --muted: 0, 0%, 20%;
      --muted-foreground: 0, 0%, 70%;
      --accent: 0, 0%, 30%;
      --border: 220 13% 30%;
    }
  }

  @layer base {
    @font-face {
      font-family: "Geist";
      src: url("/fonts/GeistVF.woff") format("woff");
    }
    * {
      @apply border-border;
    }
    body {
      font-family: "Geist", system-ui, sans-serif;
      @apply bg-background text-foreground;
    }
  }

  body::-webkit-scrollbar {
    display: none; /* Masque les barres de défilement pour les navigateurs basés sur WebKit */
  }
</style>

<script is:inline>
  const theme = (() => {
    if (typeof localStorage !== "undefined" && localStorage.getItem("theme")) {
      return localStorage.getItem("theme");
    }
    if (window.matchMedia("(prefers-color-scheme: dark)").matches) {
      return "dark";
    }
    return "light";
  })();

  if (theme === "light") {
    document.documentElement.classList.remove("dark");
  } else {
    document.documentElement.classList.add("dark");
  }
  window.localStorage.setItem("theme", theme);
</script>
