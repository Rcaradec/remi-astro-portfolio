---
interface Props {
  company: string;
  position: string;
  summary: string;
  startDate: string;
  endDate: string;
  highlights: string[];
}

const { company, position, summary, startDate, endDate, highlights } =
  Astro.props;

const parseDate = (dateString: string) => {
  const [day, month, year] = dateString.split("/").map(Number);
  return new Date(year, month - 1, day);
};

const formatDate = (date: Date) => {
  const day = String(date.getDate()).padStart(2, "0");
  const month = String(date.getMonth() + 1).padStart(2, "0");
  const year = date.getFullYear();
  return `${day}/${month}/${year}`;
};

const formattedStartDate = formatDate(parseDate(startDate));
const formattedEndDate = endDate
  ? formatDate(parseDate(endDate))
  : "Aujourd'hui";
---

<div class="max-w-xl p-10 flex flex-col gap-10 bg-background rounded-[1rem]">
  <div class="md:col-span-2 flex flex-col gap-3">
    <div class="flex flex-col gap-1">
      <h3 class="text-muted-foreground text-sm sm:text-normal tracking-tighter">
        {company}
      </h3>
      <h4 class="text text-sm sm:text-normal md:text-lg tracking-tighter">
        {position}
      </h4>
    </div>
    <time class="text-sm sm:text-normal tracking-tighter text-muted-foreground"
      >{formattedStartDate} - {formattedEndDate}</time
    >
  </div>
  <div class="relative flex flex-col gap-5 pb-4 md:col-span-3">
    <p class="text-sm sm:text-normal md:text-lg">
      {summary}
    </p>
    <ul class="list-disc">
      {
        highlights.map((highlight) => (
          <li class="text-muted-foreground text-xs sm:text-sm md:text-normal">
            {highlight}
          </li>
        ))
      }
    </ul>
  </div>
</div>
